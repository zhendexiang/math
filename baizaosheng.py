import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.stats.diagnostic import acorr_ljungbox
from statsmodels.graphics.tsaplots import plot_acf

# 原始数据（略，使用之前的数据定义）
data = [
    ("2020-01-01", 729562946), ("2020-02-01", 279143421),
    ("2020-03-01", 435329481), ("2020-04-01", 786571801),
    ("2020-05-01", 903997110), ("2020-06-01", 840090138),
    ("2020-07-01", 816355506), ("2020-08-01", 774299120),
    ("2020-09-01", 1001876701), ("2020-10-01", 951567026),
    ("2020-11-01", 874078726), ("2020-12-01", 951266475),
    ("2021-01-01", 742834968), ("2021-02-01", 381498848),
    ("2021-03-01", 661866864), ("2021-04-01", 675509918),
    ("2021-05-01", 649804679), ("2021-06-01", 631873003),
    ("2021-07-01", 695154746), ("2021-08-01", 561664804),
    ("2021-09-01", 544027993), ("2021-10-01", 474355467),
    ("2021-11-01", 594087514), ("2021-12-01", 901256012),
    ("2022-01-01", 1258422202), ("2022-02-01", 752106702),
    ("2022-03-01", 1102262515), ("2022-04-01", 1440799940),
    ("2022-05-01", 1743854941), ("2022-06-01", 1648362981),
    ("2022-07-01", 1585041433), ("2022-08-01", 1336964387),
    ("2022-09-01", 1797316541), ("2022-10-01", 1803685830),
    ("2022-11-01", 1650954900), ("2022-12-01", 1370677617),
    ("2023-01-01", 845525895), ("2023-02-01", 773442906),
    ("2023-03-01", 1271774938), ("2023-04-01", 1085226686),
    ("2023-05-01", 1164556412), ("2023-06-01", 1104611864),
    ("2023-07-01", 1015793859), ("2023-08-01", 992130832),
    ("2023-09-01", 1118749018), ("2023-10-01", 981392291),
    ("2023-11-01", 1060125537), ("2023-12-01", 921126534),
    ("2024-01-01", 1170922845), ("2024-02-01", 1001193929),
    ("2024-03-01", 1071379123), ("2024-04-01", 1267961877),
    ("2024-05-01", 1179995939), ("2024-06-01", 1077022567),
    ("2024-07-01", 1124663223), ("2024-08-01", 1355701217),
    ("2024-09-01", 1671086388), ("2024-10-01", 1626066444),
    ("2024-11-01", 1744341183), ("2024-12-01", 1829768301)
    # 此处完整粘贴您提供的60行数据
]
df = pd.DataFrame(data, columns=["date", "value"])
df["date"] = pd.to_datetime(df["date"])
df.set_index("date", inplace=True)

# ======================
# 2. 二阶差分处理
# ======================
df_diff2 = df.diff().diff().dropna()  # 两次一阶差分

# ======================
# 白噪声检验函数
# ======================
def white_noise_test(series, lags=24, alpha=0.05):
    """综合白噪声检验"""
    # Ljung-Box检验
    lb_test = acorr_ljungbox(series, lags=lags, return_df=True)

    # 可视化ACF
    plt.figure(figsize=(12, 6))
    plot_acf(series, lags=lags, alpha=alpha)
    plt.title(f"ACF Plot (Lags={lags})")
    plt.show()

    # 结果判断
    print(f"========== 白噪声检验 (α={alpha}) ==========")
    print(f"观察滞后期数：1~{lags}阶")
    print(f"最低p-value: {lb_test['lb_pvalue'].min():.4f}")

    if (lb_test['lb_pvalue'] < alpha).any():
        print(f"--> 拒绝白噪声假设（存在显著自相关）")
    else:
        print(f"--> 接受白噪声假设")

# ======================
# 对原始序列检验
# ======================
print("\n[原始序列检验]")
white_noise_test(df['value'], lags=24)

# ======================
# 对二阶差分序列检验
# ======================
print("\n[二阶差分序列检验]")
white_noise_test(df_diff2['value'], lags=24)

# ======================
# 详细检验结果输出
# ======================
def detailed_ljungbox(series, lags=24):
    """详细Ljung-Box检验结果"""
    lb_results = acorr_ljungbox(series, lags=lags, return_df=True)
    print("\nLag |  LB Stat  |  p-value  | 是否拒绝H0(α=0.05)")
    print("----|-----------|-----------|------------------")
    for i, row in lb_results.iterrows():
        reject = "✓" if row['lb_pvalue'] < 0.05 else "✗"
        print(f"{i+1:3d} | {row['lb_stat']:8.2f} | {row['lb_pvalue']:8.4f} |       {reject}")

print("\n[二阶差分序列详细检验]")
detailed_ljungbox(df_diff2['value'], lags=12)